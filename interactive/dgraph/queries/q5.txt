{
    var(func: uid(@Person@)) {
        f1 as knows {
            f2 as knows
        }
    }

    var(func: uid(f1, f2)) @filter(NOT uid(@Person@)) {
        ~hasMember @filter(ge(joinDate, "2006-0101")) {
            containerOf {
                hasCreator @filter
            }
        }
    }

    q(func: uid(f), orderdesc: val(f), first: 20) {
        _uid_
        val(f)
        lastName
        isLocatedIn {
            name
        }
    }
}

------------------------------------------------------------

curl ubuntu:8080/query -XPOST -s -d '
{
    var(func: uid(3458764513820542057)) {
        f1 as knows {
            f2 as knows
        }
    }

    var(func: uid(f1, f2)) {
        ~hasCreator {
            f as count(isLocatedIn) @filter((eq(name, "United_States") OR eq(name, "Oman")) AND ge(creationDate, "2001-01-01") AND le(creationDate, "2017-01-01"))
        }
        isLocatedIn @filter(NOT eq(name, "United_States") AND NOT eq(name, "Oman"))
    }

    q(func: uid(f), orderdesc: val(f), first: 20) @filter(NOT uid(3458764513820542057)) {
        _uid_
        val(f)
        lastName
        isLocatedIn {
            name
        }
    }
}
' | python -m json.tool

curl ubuntu:8080/query -XPOST -s -d '
{
    var(func: uid(3458764513820541861)) {
        f1 as knows
    }

    q(func: uid(f1)) @filter(NOT uid(3458764513820541861)) {
        ~hasCreator {
            ~containerOf @filter(uid_in(hasCreator, f1)) {
                _uid_
            }
        }
    }
}
' | python -m json.tool
